version: 2.1

commands:
  destroy-environment:
    description: Delete S3 bucket, destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>" --debug
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>" --debug
  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
            type: string      
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              cd ~/project/backend
              npm install
              npm run migrations:revert

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend
                
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
              --output text > ~/project/.circleci/ansible/inventory_ip.txt
            cat ~/project/.circleci/ansible/inventory_ip.txt >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory_ip.txt
            - project/.circleci/ansible/inventory.txt
  
  configure-infrastructure:
    docker:
      - image: python:3.11.0-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["68:65:cf:30:00:3e:38:71:95:1a:20:c7:62:64:34:fb"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible
      - run:
          name: Check Ansible install
          command: |
            ansible --version
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible/ && \
            cat inventory.txt && \
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [run-migrations]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "1" > migrations_status
            fi
      - save_cache:
          paths: [backend/node_modules]
          key: run-migrations
  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y tar gzip nodejs python3
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory_ip.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo "[URL02]" >> ./../urls.txt
            echo "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/" >> ./../urls.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/urls.txt
  
  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y tar gzip nodejs python3 openssh-server openssh-clients
            python3 -m pip install ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd frontend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            ls -la
            mkdir -p .circleci/ansible/roles/deploy/tasks/
            cp artifact.tar.gz .circleci/ansible/roles/deploy/tasks/
            ls -la .circleci/ansible/roles/deploy/tasks/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y tar gzip python3 nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
              export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory_ip.txt)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  exit 0
              else
                  exit 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      - destroy-environment: # on_fail
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations: # on_fail
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y tar gzip python3 nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y tar gzip python3 nodejs
      - run:
          name: Remove old stacks and files
          command: |
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 

            # Get current workflow ID
            CURRENT_WORKFLOW_ID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo Current workflow ID: "${CURRENT_WORKFLOW_ID}"

            # check for old stacks and remove them
            FoundedOldWorkflowIDS=()
            for i in "${STACKS[@]}"
            do
              if [[ "${i}" == *"-${CURRENT_WORKFLOW_ID}" ]]
              then
                echo Found stack "${i}" match current workflow ID
              else
                OldWorkflowID=${i:(-7)}
                echo Found old workflow ID: ${OldWorkflowID}
                if [[ -n "${OldWorkflowID}" ]]
                then
                  if [[ ! " ${FoundedOldWorkflowIDS[*]} " =~ " ${OldWorkflowID} "]]
                  then
                    echo Append workflowID ${OldWorkflowID} into FoundedOldWorkflowIDS array
                    FoundedOldWorkflowIDS+=("${OldWorkflowID}")
                  fi
                else
                  echo OldWorkflowID is empty
                fi
              fi
            done

            echo All old workflow IDs: "${FoundedOldWorkflowIDS[@]}"
            for i in "${FoundedOldWorkflowIDS[@]}"
            do
              echo "Cleaning up stacks with WorkflowID=${i}"
              aws s3 rb "s3://udapeople-${i}" --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${i}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${i}"
            done

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]